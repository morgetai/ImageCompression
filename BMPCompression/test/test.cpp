#include <vector>
#include <CompressedBitmap.h>
#include <stdexcept>
#include <sstream>
#include <QImage>

int main()
{
    /*     std::vector<unsigned char> data{
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x02, 0x03, 0x04, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x02, 0x03, 0x04, 0x07,
            0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x05, 0x07, 0x04, 0x08, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
            0x01, 0x02, 0x03, 0x04, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x01, 0x02, 0x03, 0x04, 0x01, 0x02, 0x03, 0x04, 0x01, 0x02, 0x03, 0x04, 0x01, 0x02, 0x03, 0x04, 0x01,
            0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff};

        CompressedBitMap cbmp(data.data(), 33, 6);
        std::stringstream ss;

        cbmp.Save(ss);
        auto res = CompressedBitMap::ReadCompressedFile(ss);

                for(auto i =0; i < res.data.size(); ++i)
            {
                if(res.data[i] != data[i])
                {
                    std::cout << "Decoded:" << res.data[i] << ". Origina:" << data[i] << std::endl;
                }
                assert(res.data[i] == data[i]);
            }  */

    QImage img("/Users/andriihridin/Documents/Programming/TestPockerBook/test-image-1.bmp", "BMP");
    // auto img = tmp.convertedTo(QImage::Format::Format_Mono);

    BitMap bit_map{img.width(), img.height(), {}};
    for (int y = 0; y < img.height(); y++)
    {
        auto line = img.constScanLine(y);
        bit_map.data.insert(bit_map.data.end(), line, line + img.width());
    }

    QImage save(bit_map.width, bit_map.height, QImage::Format::Format_Indexed8);

    for (int y = 0; y < img.height(); y++)
    {
        memcpy(save.scanLine(y), bit_map.data[y], save.bytesPerLine());
    }

    save.save("/Users/andriihridin/Documents/Programming/TestPockerBook/test-image-11.bmp");

    /*     std::stringstream ss;
        CompressedBitMap compressed(bit_map.data.data(), bit_map.width, bit_map.height);
        compressed.Save(ss);

        auto res = CompressedBitMap::ReadCompressedFile(ss);

        for (auto i = 0; i < res.data.size(); ++i)
        {
            if (res.data[i] != bit_map.data[i])
            {
                std::cout << "Decoded:" << res.data[i] << ". Origina:" << bit_map.data[i] << std::endl;
            }
            assert(res.data[i] == bit_map.data[i]);
        } */

    return 0;
}